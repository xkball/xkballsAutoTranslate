import java.time.LocalDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"

    debug.verbose = true
    debug.export = true
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
    runs {
        // applies to all the run configs below
        configureEach {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            mods {
                "${mod_id}" {
                    source sourceSets.main
                }
            }
        }
        client {
            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }
        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }
        data {
            // example of overriding the workingDirectory set in configureEach above
            workingDirectory project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }


configurations {
    runtimeClasspath.extendsFrom localRuntime
}

repositories {
    maven {
        name = "Curse maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { // Embeddium, Sodium, Iris
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    localRuntime fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    implementation fg.deobf("curse.maven:ftb-teams-forge-404468:6130786")
    implementation fg.deobf("curse.maven:architectury-api-419699:5137938")
    implementation fg.deobf("curse.maven:ftb-library-forge-404465:6164053")
    implementation fg.deobf("curse.maven:ftb-quests-forge-289412:6133440")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version: forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors: mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

// Example for how to get properties into the manifest for reading at runtime.
tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'     : mod_id,
                'Specification-Vendor'    : mod_authors,
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : mod_authors,
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }

    // This is the preferred method to reobfuscate your jar file
    finalizedBy 'reobfJar'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

base {
    archivesName = mod_id
    if(System.env.GITHUB_ACTIONS && System.env.NIGHTLY_BUILD){
        var endfix = System.env.VERSION_IDENTIFIER + "-" + LocalDateTime.now(ZoneOffset.ofHours(8)).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME).replace(':','-')
        archivesName="${archivesName.get()}-${version}-${endfix}-nightly"
        version=''
    }
}

jar{
    doLast {
        if (System.env.GITHUB_ACTIONS) {
            File theFile = archiveFile.get().getAsFile()

            def outputFile = new File(System.env.GITHUB_OUTPUT)
            // Use the env-specific line separator for maximally possible compatibility
            def newLine = System.getProperty('line.separator')

            // Write out new env variable for later usage
            outputFile << newLine << "artifact_name=${theFile.getName()}"
            outputFile << newLine << "artifact_publish_name=${archiveBaseName.get()}.jar"
            outputFile << newLine << "artifact_path=${theFile.absolutePath}"
        }
    }
}

build{
    if (System.env.GITHUB_ACTIONS){
        def outputFile = new File(System.env.GITHUB_OUTPUT)
        def newLine = System.getProperty('line.separator')
        String fileName = jar.archiveFileName.get()
        fileName = fileName.substring(0,fileName.length()-4)
        outputFile << newLine << "jar_name=${fileName}"
    }
}

tasks.register("githubActionOutput",DefaultTask){
    if (System.env.GITHUB_ACTIONS) {
        File theFile = jar.archiveFile.get().getAsFile()
        def outputFile = new File(System.env.GITHUB_OUTPUT)
        // Use the env-specific line separator for maximally possible compatibility
        def newLine = System.getProperty('line.separator')
        def publishName = "${release_name}-${loader_name}-Minecraft${minecraft_version}-${version}.jar"
        // Write out new env variable for later usage
        outputFile << newLine << "artifact_name=${theFile.getName()}"
        outputFile << newLine << "artifact_publish_name=${publishName}"
        outputFile << newLine << "artifact_path=${theFile.absolutePath}"
    }
}