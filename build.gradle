import java.time.LocalDateTime
import java.time.ZoneOffset
import java.time.format.DateTimeFormatter

plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.moddev.legacyforge' version '2.0.91'
//    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
//    id 'org.spongepowered.mixin' version '0.7.+'
}

tasks.named('wrapper', Wrapper).configure {
    distributionType = Wrapper.DistributionType.BIN
}

version = mod_version
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = mod_id
}

mixin {
    add sourceSets.main, "${mod_id}.refmap.json"
    config "${mod_id}.mixins.json"
}

// Mojang ships Java 21 to end users starting in 1.20.5, so mods should target Java 21.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

legacyForge {
    // Specify the version of MinecraftForge to use.
    version = project.minecraft_version + '-' + project.forge_version

    parchment {
        mappingsVersion = project.parchment_mappings_version
        minecraftVersion = project.parchment_minecraft_version
    }

    // This line is optional. Access Transformers are automatically detected
    // accessTransformers = project.files('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            client()

            // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        server {
            server()
            programArgument '--nogui'
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        // This run config launches GameTestServer and runs all registered gametests, then exits.
        // By default, the server will crash when no gametests are provided.
        // The gametest system is also enabled by default for other run configs under the /test command.
        gameTestServer {
            type = "gameTestServer"
            systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        }

        data {
            data()

            // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
            // gameDirectory = project.file('run-data')

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
        }

        // applies to all the run configs above
        configureEach {
            // Recommended logging data for a userdev environment
            // The markers can be added/remove as needed separated by commas.
            // "SCAN": For mods scan.
            // "REGISTRIES": For firing of registry events.
            // "REGISTRYDUMP": For getting the contents of all registries.
            systemProperty 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            // You can set various levels here.
            // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
            logLevel = org.slf4j.event.Level.DEBUG
        }
    }

    mods {
        // define mod <-> source bindings
        // these are used to tell the game which sources are for which mod
        // mostly optional in a single mod project
        // but multi mod projects should define one per mod
        "${mod_id}" {
            sourceSet(sourceSets.main)
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

//jarJar {
//    enable()
//}

//tasks.jarJar.finalizedBy('reobfJarJar')
//
//reobf {
//    jarJar {}
//}

configurations {
    runtimeClasspath.extendsFrom localRuntime

    mcLib
    implementation {
        extendsFrom mcLib
    }
    additionalRuntimeClasspath {
        extendsFrom mcLib
    }
}

obfuscation {
    createRemappingConfiguration(configurations.localRuntime)
}

repositories {
    maven {
        name = "Curse maven"
        url = "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
    maven {
        // location of the maven that hosts JEI files since January 2023
        name = "Jared's maven"
        url = "https://maven.blamejared.com/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.dev"
    }
    maven { // Embeddium, Sodium, Iris
        name = "Modrinth Maven"
        url = "https://api.modrinth.com/maven"
        content {
            includeGroup "maven.modrinth"
        }
    }
}

dependencies {
    //minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    modCompileOnly("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    modCompileOnly("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    modLocalRuntime("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    modImplementation("curse.maven:ftb-teams-forge-404468:6130786")
    modImplementation("curse.maven:architectury-api-419699:5137938")
    modImplementation("curse.maven:ftb-library-forge-404465:6164053")
    modImplementation("curse.maven:ftb-quests-forge-289412:6133440")

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    implementation(jarJar(files("lib/sqlite-jdbc-3.50.3.0.jar")))
    implementation(jarJar("org.yaml:snakeyaml:2.3"))

    compileOnly(annotationProcessor("io.github.llamalad7:mixinextras-common:0.5.0"))
    implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.5.0"))

}

// Example configuration to allow publishing using the maven-publish plugin
publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

//tasks.named('processResources', ProcessResources).configure {
//    var replaceProperties = [
//            minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
//            forge_version: forge_version, forge_version_range: forge_version_range,
//            loader_version_range: loader_version_range,
//            mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
//            mod_authors: mod_authors, mod_description: mod_description,
//    ]
//    inputs.properties replaceProperties
//
//    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
//        expand replaceProperties + [project: project]
//    }
//}

jar {
    manifest.attributes([
            "MixinConfigs": "${mod_id}.mixins.json"
    ])
}

var generateModMetadata = tasks.register("generateModMetadata", ProcessResources) {
    var replaceProperties = [
            minecraft_version        : minecraft_version,
            minecraft_version_range  : minecraft_version_range,
            forge_version            : forge_version,
            forge_version_range      : forge_version_range,
            loader_version_range     : loader_version_range,
            mod_id                   : mod_id,
            mod_name                 : mod_name,
            mod_license              : mod_license,
            mod_version              : mod_version,
            mod_authors              : mod_authors,
            mod_description          : mod_description
    ]
    inputs.properties replaceProperties
    expand replaceProperties
    from "src/main/templates"
    into "build/generated/sources/modMetadata"
}
sourceSets.main.resources.srcDir generateModMetadata
legacyForge.ideSyncTask generateModMetadata

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

// IDEA no longer automatically downloads sources/javadoc jars for dependencies, so we need to explicitly enable the behavior.
idea {
    module {
        downloadSources = true
        downloadJavadoc = true
    }
}

base {
    archivesName = mod_id
    if(System.env.GITHUB_ACTIONS && System.env.NIGHTLY_BUILD){
        var endfix = System.env.VERSION_IDENTIFIER + "-" + LocalDateTime.now(ZoneOffset.ofHours(8)).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME).replace(':','-')
        archivesName="${archivesName.get()}-${version}-${endfix}-nightly"
        version=''
    }
}

jar{
    doLast {
        if (System.env.GITHUB_ACTIONS) {
            File theFile = archiveFile.get().getAsFile()

            def outputFile = new File(System.env.GITHUB_OUTPUT)
            // Use the env-specific line separator for maximally possible compatibility
            def newLine = System.getProperty('line.separator')

            // Write out new env variable for later usage
            outputFile << newLine << "artifact_name=${theFile.getName()}"
            outputFile << newLine << "artifact_publish_name=${archiveBaseName.get()}.jar"
            outputFile << newLine << "artifact_path=${theFile.absolutePath}"
        }
    }
}

build{
    if (System.env.GITHUB_ACTIONS){
        def outputFile = new File(System.env.GITHUB_OUTPUT)
        def newLine = System.getProperty('line.separator')
        String fileName = jar.archiveFileName.get()
        fileName = fileName.substring(0,fileName.length()-4)
        outputFile << newLine << "jar_name=${fileName}"
    }
}

tasks.register("githubActionOutput",DefaultTask){
    if (System.env.GITHUB_ACTIONS) {
        File theFile = jar.archiveFile.get().getAsFile()
        def outputFile = new File(System.env.GITHUB_OUTPUT)
        // Use the env-specific line separator for maximally possible compatibility
        def newLine = System.getProperty('line.separator')
        def publishName = "${release_name}-${loader_name}-Minecraft${minecraft_version}-${version}.jar"
        // Write out new env variable for later usage
        outputFile << newLine << "artifact_name=${theFile.getName()}"
        outputFile << newLine << "artifact_publish_name=${publishName}"
        outputFile << newLine << "artifact_path=${theFile.absolutePath}"
    }
}